df_2 <- select(df_init, romantic, freetime, studytime, higher, famrel, traveltime, Pstatus, goout, G3, activities, health)
df_2 <- mutate(df_2, romantic = ifelse(romantic == "yes", 1, 0))
df_2
df_2 <- map(df_2, as.character)
df_2
# For decision tree, categorical
df_2 <- select(df_init, romantic, freetime, studytime, higher, famrel, traveltime, Pstatus, goout, G3, activities, health)
df_2 <- mutate(df_2, romantic = ifelse(romantic == "yes", 1, 0))
df_2
df_2 <- mutate(across(everything(), as.character))
# For decision tree, categorical
df_2 <- select(df_init, romantic, freetime, studytime, higher, famrel, traveltime, Pstatus, goout, G3, activities, health)
df_2 <- mutate(df_2, romantic = ifelse(romantic == "yes", 1, 0))
df_2
df_2 <- mutate(df_2, across(everything(), as.character))
df_2
split_2 <- initial_split(df_2, prop=0.75, strata = romantic)
df_train_2 <- training(split_2)
df_train_2
df_test_2 <- testing(split_2)
df_test_2
write_delim(df_2, file = "student/student-mat-clean-dt.csv",delim = ",")
write_delim(df_test_2, file = "student/student-mat-clean-dt-test.csv",delim = ",")
write_delim(df_train_2, file = "student/student-mat-clean-dt-train.csv",delim = ",")
# For decision tree, categorical
df_2 <- select(df_init, romantic, freetime, studytime, higher, famrel, traveltime, Pstatus, goout, G3, activities, health)
df_2 <- mutate(df_2, romantic = ifelse(romantic == "yes", 1, 0))
df_2 <- mutate(df_2, higher = ifelse(romantic == "yes", 1, 0))
df_2
df_2 <- mutate(df_2, across(everything(), as.character))
df_2
split_2 <- initial_split(df_2, prop=0.75, strata = romantic)
df_train_2 <- training(split_2)
df_train_2
df_test_2 <- testing(split_2)
df_test_2
write_delim(df_2, file = "student/student-mat-clean-dt.csv",delim = ",")
write_delim(df_test_2, file = "student/student-mat-clean-dt-test.csv",delim = ",")
write_delim(df_train_2, file = "student/student-mat-clean-dt-train.csv",delim = ",")
# For decision tree, categorical
df_2 <- select(df_init, romantic, freetime, studytime, higher, famrel, traveltime, Pstatus, goout, G3, activities, health)
df_2 <- mutate(df_2, romantic = ifelse(romantic == "yes", 1, 0))
df_2 <- mutate(df_2, higher = ifelse(higher == "yes", 1, 0))
df_2 <- mutate(df_2, activities = ifelse(activities == "yes", 1, 0))
df_2
df_2 <- mutate(df_2, across(everything(), as.character))
df_2
split_2 <- initial_split(df_2, prop=0.75, strata = romantic)
df_train_2 <- training(split_2)
df_train_2
df_test_2 <- testing(split_2)
df_test_2
write_delim(df_2, file = "student/student-mat-clean-dt.csv",delim = ",")
write_delim(df_test_2, file = "student/student-mat-clean-dt-test.csv",delim = ",")
write_delim(df_train_2, file = "student/student-mat-clean-dt-train.csv",delim = ",")
# For decision tree, categorical
df_2 <- select(df_init, romantic, freetime, studytime, higher, famrel, traveltime, Pstatus, goout, G3, activities, health)
df_2 <- mutate(df_2, romantic = ifelse(romantic == "yes", 1, 0))
df_2 <- mutate(df_2, higher = ifelse(higher == "yes", 1, 0))
df_2 <- mutate(df_2, activities = ifelse(activities == "yes", 1, 0))
df_2 <- mutate(df_2, Pstatus = ifelse(Pstatus == "T", 1, 0))
df_2
df_2 <- mutate(df_2, across(everything(), as.character))
df_2 |> filter()
split_2 <- initial_split(df_2, prop=0.75, strata = romantic)
df_train_2 <- training(split_2)
df_train_2
df_test_2 <- testing(split_2)
df_test_2
write_delim(df_2, file = "student/student-mat-clean-dt.csv",delim = ",")
write_delim(df_test_2, file = "student/student-mat-clean-dt-test.csv",delim = ",")
write_delim(df_train_2, file = "student/student-mat-clean-dt-train.csv",delim = ",")
# Data source: https://archive.ics.uci.edu/ml/datasets/student+performance
df_init <- read_delim("adult.csv",delim=";")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Data source: https://archive.ics.uci.edu/ml/datasets/student+performance
df_init <- read_delim("adult.csv",delim=";")
head(df)
head(df_init)
# Data source: https://archive.ics.uci.edu/ml/datasets/student+performance
df_init <- read_delim("adult.csv",delim=",")
head(df_init)
head(df_init)
df <- mutate(df, `marital-status` = ifelse(`marital-status` == "Married-civ-spouse", 1, 0))
df <- df_init
df <- mutate(df, `marital-status` = ifelse(`marital-status` == "Married-civ-spouse", 1, 0))
split <- initial_split(df, prop=0.75, strata = romantic)
split <- initial_split(df, prop=0.75, strata = `marital-status`)
df_train <- training(split)
df_train
df_test <- testing(split)
df_test
head(df_init)
df <- mutate(df, `marital-status` = ifelse(`marital-status` == "Married-civ-spouse", 1, 0))
# Data source: https://archive.ics.uci.edu/ml/datasets/student+performance
df_init <- read_delim("adult.csv",delim=",")
head(df_init)
df <- df_init
# Data source: https://archive.ics.uci.edu/ml/datasets/student+performance
df_init <- read_delim("adult.csv",delim=",")
head(df_init)
df <- df_init
df <- mutate(df, `marital-status` = ifelse(`marital-status` == "Married-civ-spouse", 1, 0))
head(df)
df_train <- training(split)
df_train
df_test <- testing(split)
df_test
write_delim(df, file = "student-mat-clean.csv",delim = ",")
write_delim(df_train, file = "adult-one-hot-train.csv",delim = ",")
write_delim(df_test, file = "adult-one-hot-test.csv",delim = ",")
df |> group_by(education) |> summarize(count = n())
df |> group_by("education") |> summarize(count = n())
df |> group_by(as.formula("education")) |> summarize(count = n())
df |> group_by(as.formula(paste("education"))) |> summarize(count = n())
df |> group_by(across(all_of(columns_to_encode))) |> summarize(across(all_of(columns_to_encode),n()))
columns_to_encode <- c("workclass","education","occupation","race","gender")
df |> group_by(across(all_of(columns_to_encode))) |> summarize(across(all_of(columns_to_encode),n()))
columns_to_encode <- c("workclass","education","occupation","race","gender")
fix <- function(s){
return !!rlang::sym(s)
fix <- function(s){
return (!!rlang::sym(s))
}
df |> group_by(fix("education")) |> summarize(count = n())
df |> group_by(fix(c("education"))) |> summarize(count = n())
rlang::last_error()
df |> group_by(rlang::sym(c("education"))) |> summarize(count = n())
df |> group_by(!!rlang::sym(c("education"))) |> summarize(count = n())
df |> group_by(fix(c("education"))) |> summarize(count = n())
df |> group_by(!!rlang::sym(c("education"))) |> summarize(count = n())
df |> group_by(!!rlang::sym(columns_to_encode) |> summarize(count = n())
df |> group_by(!!rlang::sym(columns_to_encode)) |> summarize(count = n())
df |> group_by(!!rlang::sym(columns_to_encode)) |> summarize(count = n())
df |> group_by(!!rlang::sym(columns_to_encode))
(c("education")
df |> group_by(!!rlang::sym(c("education"))) |> summarize(count = n())
df |> group_by(!!rlang::sym(c("education"))) |> summarize(count = n())
for (column in columns_to_encode){
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n())
for (item in new_cols){
df <- mutate(df, !!rlang::sym(c(item)) = one_hot(column == item))
df <- df |> mutate(!!rlang::sym(c(item)) = one_hot(column == item))
for (column in columns_to_encode){
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n())
for (item in new_cols){
df <- df |> mutate(!!rlang::sym(c(item)) = one_hot(column == item))
mutate(df, "hi" = 5)
mutate(df, "hi" = 5)
for (column in columns_to_encode){
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n())
for (item in new_cols){
df <- df |> mutate(item = one_hot(column == item))
}
}
one_hot <- function(bool){
if (bool){
return(1)
}
return(0)
}
for (column in columns_to_encode){
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n())
for (item in new_cols){
df <- df |> mutate(item = one_hot(column == item))
}
}
one_hot <- function(i1,i2){
if (i1 == i2){
return(1)
}
return(0)
}
for (column in columns_to_encode){
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n())
for (item in new_cols){
df <- df |> mutate(item = one_hot(column,item))
}
}
1 == 2
1 == 1
for (column in columns_to_encode){
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
for (item in new_cols){
df <- df |> mutate(item = one_hot(column,item))
}
}
cat("This is new_cols:",new_cols)
for (column in columns_to_encode){
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:",new_cols)
for (item in new_cols){
df <- df |> mutate(item = one_hot(column,item))
}
}
for (column in columns_to_encode){
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:",new_cols)
for (item in new_cols){
cat("This is item:",item)
df <- df |> mutate(item = one_hot(column,item))
}
}
for (column in columns_to_encode){
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate(item = one_hot(column,item))
}
}
for (column in columns_to_encode){
print("This is the column")
print(column)
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate(item = one_hot(column,item))
}
}
for (column in columns_to_encode){
print("This is the column")
print(column)
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate(item = !!rlang::sym(c(column)) == item)
}
}
df
# Data source: https://archive.ics.uci.edu/ml/datasets/student+performance
df_init <- read_delim("adult.csv",delim=",")
head(df_init)
df <- df_init
df <- mutate(df, `marital-status` = ifelse(`marital-status` == "Married-civ-spouse", 1, 0))
columns_to_encode <- c("workclass","education","occupation","race","gender")
df |> group_by(!!rlang::sym(c("education"))) |> summarize(count = n())
for (column in columns_to_encode){
print("This is the column")
print(column)
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate(item = !!rlang::sym(c(column)) == item)
}
}
df
# Data source: https://archive.ics.uci.edu/ml/datasets/student+performance
df_init <- read_delim("adult.csv",delim=",")
head(df_init)
df <- df_init
df <- mutate(df, `marital-status` = ifelse(`marital-status` == "Married-civ-spouse", 1, 0))
columns_to_encode <- c("workclass","education","occupation","race","gender")
df |> group_by(!!rlang::sym(c("education"))) |> summarize(count = n())
for (column in columns_to_encode){
print("This is the column")
print(column)
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate(sprintf("%s",item) = !!rlang::sym(c(column)) == item)
for (column in columns_to_encode){
print("This is the column")
print(column)
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate( "{item}" := !!rlang::sym(c(column)) == item)
}
}
df
df
head(df)
# Data source: https://archive.ics.uci.edu/ml/datasets/student+performance
df_init <- read_delim("adult.csv",delim=",")
head(df_init)
df <- df_init
df <- mutate(df, `marital-status` = ifelse(`marital-status` == "Married-civ-spouse", 1, 0))
columns_to_encode <- c("workclass","education","occupation","race","gender")
df |> group_by(!!rlang::sym(c("education"))) |> summarize(count = n())
one_hot <- function(bool){
if (bool){
return(1)
}
return(0)
}
for (column in columns_to_encode){
print("This is the column")
print(column)
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate( "{item}" := one_hot(!!rlang::sym(c(column)) == item))
}
}
for (column in columns_to_encode){
print("This is the column")
print(column)
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate( "{item}" := !!rlang::sym(c(column)) == item)
}
}
mutate(df, across(cols = 16:))
df
mutate(df, across(.cols = 16:61, one_hot)
df
mutate(df, across(.cols = 16:61, one_hot))
df
mutate(df, across(16:61, one_hot))
mutate(df, across(16:61, one_hot))
one_hot <- function(bool){
print("This is bool\n\n")
print(bool)
if (bool){
return(1)
}
return(0)
}
mutate(df, across(16:61, one_hot))
# Data source: https://archive.ics.uci.edu/ml/datasets/student+performance
df_init <- read_delim("adult.csv",delim=",")
head(df_init)
df <- df_init
df <- mutate(df, `marital-status` = ifelse(`marital-status` == "Married-civ-spouse", 1, 0))
columns_to_encode <- c("workclass","education","occupation","race","gender")
df |> group_by(!!rlang::sym(c("education"))) |> summarize(count = n())
one_hot <- function(bool){
print("This is bool\n\n")
print(bool)
if (bool){
return(1)
}
return(0)
}
for (column in columns_to_encode){
print("This is the column")
print(column)
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate( "{item}" := !!rlang::sym(c(column)) == item)
df <- df |> mutate( "{item}" := one_hot(item))
}
}
for (column in columns_to_encode){
print("This is the column")
print(column)
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate( "{item}" := !!rlang::sym(c(column)) == item)
df <- df |> mutate( "{item}" := one_hot(!!rlang::sym(c(item))))
}
}
for (column in columns_to_encode){
print("This is the column")
print(column)
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate( "{item}" := !!rlang::sym(c(column)) == item)
df <- mutate(df, "{item}" := ifelse(!!rlang::sym(c(item)), 1, 0))
#df <- df |> mutate( "{item}" := one_hot(!!rlang::sym(c(item))))
}
}
df
df_for_dectree <- select(df, -age,-workclass,-fnlwgt,-education,-`educational-num`,-occupation,-relationship,-`capital-gain`,-`capital-loss`,-`hours-per-week`,-`native-country`,-`income`)
df_for_dectree
df_for_dectree <- select(df, -age,-workclass,-fnlwgt,-education,-`educational-num`,-occupation,-relationship,-`capital-gain`,-`capital-loss`,-`hours-per-week`,-`native-country`,-`income`,-`race`,-`gender`)
df_for_dectree
split <- initial_split(df_for_dectree, prop=0.75, strata = `marital-status`)
df_train <- training(split)
df_train
df_test <- testing(split)
df_test
write_delim(df_train, file = "adult-one-hot-train.csv",delim = ",")
write_delim(df_test, file = "adult-one-hot-test.csv",delim = ",")
write_delim(df, file = "student-mat-clean.csv",delim = ",")
# Data source: https://archive.ics.uci.edu/ml/datasets/student+performance
df_init <- read_delim("adult.csv",delim=",")
head(df_init)
df <- df_init
df <- mutate(df, `marital-status` = ifelse(`marital-status` == "Married-civ-spouse", 1, 0))
columns_to_encode <- c("workclass","education","occupation","race","gender","Income")
df |> group_by(!!rlang::sym(c("education"))) |> summarize(count = n())
one_hot <- function(bool){
print("This is bool\n\n")
print(bool)
if (bool){
return(1)
}
return(0)
}
for (column in columns_to_encode){
print("This is the column")
print(column)
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate( "{item}" := !!rlang::sym(c(column)) == item)
df <- mutate(df, "{item}" := ifelse(!!rlang::sym(c(item)), 1, 0))
#df <- df |> mutate( "{item}" := one_hot(!!rlang::sym(c(item))))
}
}
head(df_init)
# Data source: https://archive.ics.uci.edu/ml/datasets/student+performance
df_init <- read_delim("adult.csv",delim=",")
head(df_init)
df <- df_init
df <- mutate(df, `marital-status` = ifelse(`marital-status` == "Married-civ-spouse", 1, 0))
columns_to_encode <- c("workclass","education","occupation","race","gender","Income")
df |> group_by(!!rlang::sym(c("education"))) |> summarize(count = n())
one_hot <- function(bool){
print("This is bool\n\n")
print(bool)
if (bool){
return(1)
}
return(0)
}
for (column in columns_to_encode){
print("This is the column")
print(column)
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate( "{item}" := !!rlang::sym(c(column)) == item)
df <- mutate(df, "{item}" := ifelse(!!rlang::sym(c(item)), 1, 0))
#df <- df |> mutate( "{item}" := one_hot(!!rlang::sym(c(item))))
}
}
# Data source: https://archive.ics.uci.edu/ml/datasets/student+performance
df_init <- read_delim("adult.csv",delim=",")
head(df_init)
df <- df_init
df <- mutate(df, `marital-status` = ifelse(`marital-status` == "Married-civ-spouse", 1, 0))
columns_to_encode <- c("workclass","education","occupation","race","gender","income")
df |> group_by(!!rlang::sym(c("education"))) |> summarize(count = n())
one_hot <- function(bool){
print("This is bool\n\n")
print(bool)
if (bool){
return(1)
}
return(0)
}
for (column in columns_to_encode){
print("This is the column")
print(column)
new_cols = df |> group_by(!!rlang::sym(c(column))) |> summarize(count = n()) |> pull(1)
cat("This is new_cols:")
print(new_cols)
for (item in new_cols){
cat("This is item:")
print(item)
df <- df |> mutate( "{item}" := !!rlang::sym(c(column)) == item)
df <- mutate(df, "{item}" := ifelse(!!rlang::sym(c(item)), 1, 0))
#df <- df |> mutate( "{item}" := one_hot(!!rlang::sym(c(item))))
}
}
df
df_for_dectree <- select(df, -age,-workclass,-fnlwgt,-education,-`educational-num`,-occupation,-relationship,-`capital-gain`,-`capital-loss`,-`hours-per-week`,-`native-country`,-`income`,-`race`,-`gender`)
df_for_dectree
mutate(df, "hi" = 5)
split <- initial_split(df_for_dectree, prop=0.75, strata = `marital-status`)
df_train <- training(split)
df_train
df_test <- testing(split)
df_test
write_delim(df, file = "student-mat-clean.csv",delim = ",")
write_delim(df_train, file = "adult-one-hot-train.csv",delim = ",")
write_delim(df_test, file = "adult-one-hot-test.csv",delim = ",")
